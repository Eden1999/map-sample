{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["MapComponent","props","useState","setLoading","mapViewDiv","id","style","height","position","width","top","useEffect","map","Map","basemap","MapView","container","zoom","ui","components","when","err","gps","textAlign","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","App","document","getElementById"],"mappings":"4QAqGeA,EAjFM,SAACC,GAClB,MAAiCC,oBAAS,GAA1C,mBAAkBC,GAAlB,WAEMC,EAAa,qBAAKC,GAAK,UAAUC,MAAO,CAAEC,OAAS,OAAQC,SAAW,WAAYC,MAAQ,OAAQC,IAAM,UAuE9G,OAtEAC,qBAAU,WACN,IAAK,IAAD,EAIMC,EAAM,IAAIC,IAAI,CAACC,QAAU,YA2BxB,QAAP,EATU,IAAIC,IAAQ,CAClBC,UAAUZ,EAAWH,MAAMI,GAC3BO,IAAKA,EAELK,KAAO,GAEPC,GAAK,CAACC,WAAa,aAGvB,SAASC,MAAK,WACVjB,GAAW,MAEjB,MAAOkB,GACLlB,GAAW,MAGjB,IAIFQ,qBAAU,cAwBR,CAACV,EAAMqB,MAGF,qBAAKhB,MAAO,CAACiB,UAAY,UAAzB,SAEFnB,KCpFMoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,gCAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACC,EAAD,MAEFC,SAASC,eAAe,SAM1Bd,M","file":"static/js/main.3e235ce7.chunk.js","sourcesContent":["import React, {useEffect,useContext, useState} from 'react';\n// import { AppContext } from \"store/AppContext\";\nimport MapView from \"@arcgis/core/views/MapView\"\n// import \"./MapComponent.css\"\n// import {StationsLayer, VectorTile } from \"core/consts\"\nimport Map from '@arcgis/core/Map';\nimport Point from \"@arcgis/core/geometry/Point\";\nimport Graphic from '@arcgis/core/Graphic';\nimport VectorTileLayer from \"@arcgis/core/layers/VectorTileLayer\"\nimport PictureMarkerSymbol from \"@arcgis/core/symbols/PictureMarkerSymbol\"\nimport '@arcgis/core/assets/esri/themes/dark/main.css';\n// import location from \"assets/images/soldierImg.png\"\n// import loadingCircle from \"assets/images/loadingCircle.gif\"\nimport FeatureLayer from '@arcgis/core/layers/FeatureLayer';\n// import { GPS } from 'core/types';\n\nlet mapView  = null\n\n\n\nconst MapComponent = (props) => {\n    const [isLoading, setLoading]  = useState(true);\n    // const [{visibleMap},dispatch] = useContext(AppContext)\n    const mapViewDiv = <div id = \"mapView\" style={{ height : \"95vh\", position : \"absolute\", width : '100%', top : '10vh' }}></div>\n    useEffect(() => { \n        try {\n            // @ts-ignore\n            // const vetorTile = new VectorTileLayer(VectorTile);\n            \n            const map = new Map({basemap : 'streets'});\n\n            // var point = new Point({ \n            //   longitude: 31,\n            //   latitude: props.gps.lat\n            // });\n        \n            // let pic = new PictureMarkerSymbol({\n            //     url : location,\n            //     width: '50px',\n            //     height : '70px'\n            // })\n              \n            // const pointGraphic = new Graphic({\n            //     geometry: point,\n            //     symbol: pic\n            // });\n\n            mapView = new MapView({\n                container:mapViewDiv.props.id,\n                map: map,\n                // center : point,\n                zoom : 17,\n                // graphics : [pointGraphic],\n                ui : {components : []}\n            });\n            \n            mapView?.when(() => {\n                setLoading(false);\n            })\n        } catch (err) {\n            setLoading(false);\n        }\n    }\n    , []\n    )\n\n    // If the user's location has been changed, set new center\n    useEffect(() => { \n        try {\n            // var point = new Point({ \n            //     longitude: props.gps.lon,\n            //     latitude: props.gps.lat\n            // });\n\n            // let pic = new PictureMarkerSymbol({\n            //     url : location,\n            //     width: '50px',\n            //     height : '70px'\n            // })\n              \n            // const pointGraphic = new Graphic({\n            //     geometry: point,\n            //     symbol: pic\n            // });\n\n            // mapView.center = point;\n            // mapView.graphics.removeAll();\n            // mapView.graphics.add(pointGraphic);\n        } catch (err) {\n        }\n    }\n    , [props.gps]\n    )\n\n    return <div style={{textAlign : 'center'}}>\n        {/* {isLoading  && <img style={{width : '60px', height : '60px', marginTop : '40vh', position : \"absolute\",marginRight: '-8vw'}} src={loadingCircle}/>} */}\n        {mapViewDiv}\n    </div>\n      \n}\n \nexport default MapComponent;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}